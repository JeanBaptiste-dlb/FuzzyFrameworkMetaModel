/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalFuzzyLanguageParser;
import org.xtext.example.mydsl.services.FuzzyLanguageGrammarAccess;

public class FuzzyLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FuzzyLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FuzzyLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWriteAccess().getAlternatives(), "rule__Write__Alternatives");
			builder.put(grammarAccess.getOutputAccess().getAlternatives(), "rule__Output__Alternatives");
			builder.put(grammarAccess.getAffectationAccess().getAlternatives(), "rule__Affectation__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getParamAccess().getAlternatives(), "rule__Param__Alternatives");
			builder.put(grammarAccess.getFuzzyModelAccess().getGroup(), "rule__FuzzyModel__Group__0");
			builder.put(grammarAccess.getOutputsAccess().getGroup(), "rule__Outputs__Group__0");
			builder.put(grammarAccess.getWriteAccess().getGroup_0(), "rule__Write__Group_0__0");
			builder.put(grammarAccess.getWriteAccess().getGroup_1(), "rule__Write__Group_1__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_0(), "rule__Output__Group_0__0");
			builder.put(grammarAccess.getFuzzySystemBuildingAccess().getGroup(), "rule__FuzzySystemBuilding__Group__0");
			builder.put(grammarAccess.getAffectationAccess().getGroup_0(), "rule__Affectation__Group_0__0");
			builder.put(grammarAccess.getAffectationAccess().getGroup_1(), "rule__Affectation__Group_1__0");
			builder.put(grammarAccess.getAffectationAccess().getGroup_2(), "rule__Affectation__Group_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
			builder.put(grammarAccess.getBindingAccess().getGroup_3(), "rule__Binding__Group_3__0");
			builder.put(grammarAccess.getParamAccess().getGroup_0(), "rule__Param__Group_0__0");
			builder.put(grammarAccess.getTypeSetAccess().getGroup(), "rule__TypeSet__Group__0");
			builder.put(grammarAccess.getFuzzyConfigAccess().getGroup(), "rule__FuzzyConfig__Group__0");
			builder.put(grammarAccess.getFuzzyModelAccess().getElementsAssignment_0(), "rule__FuzzyModel__ElementsAssignment_0");
			builder.put(grammarAccess.getFuzzyModelAccess().getElementsAssignment_1(), "rule__FuzzyModel__ElementsAssignment_1");
			builder.put(grammarAccess.getFuzzyModelAccess().getElementsAssignment_2(), "rule__FuzzyModel__ElementsAssignment_2");
			builder.put(grammarAccess.getOutputsAccess().getOutAssignment_2(), "rule__Outputs__OutAssignment_2");
			builder.put(grammarAccess.getOutputsAccess().getWrAssignment_3(), "rule__Outputs__WrAssignment_3");
			builder.put(grammarAccess.getWriteAccess().getValueAssignment_0_1(), "rule__Write__ValueAssignment_0_1");
			builder.put(grammarAccess.getWriteAccess().getValueAssignment_1_1(), "rule__Write__ValueAssignment_1_1");
			builder.put(grammarAccess.getOutputAccess().getTypeAssignment_0_0(), "rule__Output__TypeAssignment_0_0");
			builder.put(grammarAccess.getOutputAccess().getPathAssignment_0_2(), "rule__Output__PathAssignment_0_2");
			builder.put(grammarAccess.getOutputAccess().getTypeAssignment_1(), "rule__Output__TypeAssignment_1");
			builder.put(grammarAccess.getOutputAccess().getTypeAssignment_2(), "rule__Output__TypeAssignment_2");
			builder.put(grammarAccess.getFuzzySystemBuildingAccess().getAffectationsAssignment_2(), "rule__FuzzySystemBuilding__AffectationsAssignment_2");
			builder.put(grammarAccess.getAffectationAccess().getNameAssignment_0_0(), "rule__Affectation__NameAssignment_0_0");
			builder.put(grammarAccess.getAffectationAccess().getValueAssignment_0_2(), "rule__Affectation__ValueAssignment_0_2");
			builder.put(grammarAccess.getAffectationAccess().getParamsAssignment_0_4(), "rule__Affectation__ParamsAssignment_0_4");
			builder.put(grammarAccess.getAffectationAccess().getNameAssignment_1_0(), "rule__Affectation__NameAssignment_1_0");
			builder.put(grammarAccess.getAffectationAccess().getValueAssignment_1_2(), "rule__Affectation__ValueAssignment_1_2");
			builder.put(grammarAccess.getAffectationAccess().getNameAssignment_2_0(), "rule__Affectation__NameAssignment_2_0");
			builder.put(grammarAccess.getAffectationAccess().getExpAssignment_2_2(), "rule__Affectation__ExpAssignment_2_2");
			builder.put(grammarAccess.getExpressionAccess().getNameAssignment_0_0(), "rule__Expression__NameAssignment_0_0");
			builder.put(grammarAccess.getExpressionAccess().getExpsAssignment_0_2(), "rule__Expression__ExpsAssignment_0_2");
			builder.put(grammarAccess.getExpressionAccess().getNameAssignment_1_0(), "rule__Expression__NameAssignment_1_0");
			builder.put(grammarAccess.getExpressionAccess().getValueAssignment_1_2(), "rule__Expression__ValueAssignment_1_2");
			builder.put(grammarAccess.getExpressionAccess().getNameAssignment_2(), "rule__Expression__NameAssignment_2");
			builder.put(grammarAccess.getBindingAccess().getOpAssignment_0(), "rule__Binding__OpAssignment_0");
			builder.put(grammarAccess.getBindingAccess().getTargetAssignment_2(), "rule__Binding__TargetAssignment_2");
			builder.put(grammarAccess.getBindingAccess().getParamsAssignment_3_1(), "rule__Binding__ParamsAssignment_3_1");
			builder.put(grammarAccess.getParamAccess().getValueAssignment_0_0(), "rule__Param__ValueAssignment_0_0");
			builder.put(grammarAccess.getParamAccess().getValueAssignment_1(), "rule__Param__ValueAssignment_1");
			builder.put(grammarAccess.getTypeSetAccess().getTypeNameAssignment_3(), "rule__TypeSet__TypeNameAssignment_3");
			builder.put(grammarAccess.getFuzzyConfigAccess().getTypeSETAssignment_2(), "rule__FuzzyConfig__TypeSETAssignment_2");
			builder.put(grammarAccess.getFuzzyConfigAccess().getBindingsListAssignment_3(), "rule__FuzzyConfig__BindingsListAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FuzzyLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalFuzzyLanguageParser createParser() {
		InternalFuzzyLanguageParser result = new InternalFuzzyLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FuzzyLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FuzzyLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
