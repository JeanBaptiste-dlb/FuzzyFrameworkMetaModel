/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FuzzyLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FuzzyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.FuzzyModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsFuzzyConfigParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsFuzzySystemBuildingParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsOutputsParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//FuzzyModel:
		//	elements+=FuzzyConfig
		//	elements+=FuzzySystemBuilding
		//	elements+=Outputs*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=FuzzyConfig elements+=FuzzySystemBuilding elements+=Outputs*
		public Group getGroup() { return cGroup; }
		
		//elements+=FuzzyConfig
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//FuzzyConfig
		public RuleCall getElementsFuzzyConfigParserRuleCall_0_0() { return cElementsFuzzyConfigParserRuleCall_0_0; }
		
		//elements+=FuzzySystemBuilding
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//FuzzySystemBuilding
		public RuleCall getElementsFuzzySystemBuildingParserRuleCall_1_0() { return cElementsFuzzySystemBuildingParserRuleCall_1_0; }
		
		//elements+=Outputs*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Outputs
		public RuleCall getElementsOutputsParserRuleCall_2_0() { return cElementsOutputsParserRuleCall_2_0; }
	}
	public class OutputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Outputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutOutputParserRuleCall_2_0 = (RuleCall)cOutAssignment_2.eContents().get(0);
		private final Assignment cWrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWrWriteParserRuleCall_3_0 = (RuleCall)cWrAssignment_3.eContents().get(0);
		
		//Outputs:
		//	"Output" "=" out=Output wr=Write;
		@Override public ParserRule getRule() { return rule; }
		
		//"Output" "=" out=Output wr=Write
		public Group getGroup() { return cGroup; }
		
		//"Output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//out=Output
		public Assignment getOutAssignment_2() { return cOutAssignment_2; }
		
		//Output
		public RuleCall getOutOutputParserRuleCall_2_0() { return cOutOutputParserRuleCall_2_0; }
		
		//wr=Write
		public Assignment getWrAssignment_3() { return cWrAssignment_3; }
		
		//Write
		public RuleCall getWrWriteParserRuleCall_3_0() { return cWrWriteParserRuleCall_3_0; }
	}
	public class WriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Write");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWriteKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPrintKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Write:
		//	"Write(" value=ID ")"
		//	| "Print(" value=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Write(" value=ID ")" | "Print(" value=ID ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Write(" value=ID ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"Write("
		public Keyword getWriteKeyword_0_0() { return cWriteKeyword_0_0; }
		
		//value=ID
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_1_0() { return cValueIDTerminalRuleCall_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//"Print(" value=ID ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"Print("
		public Keyword getPrintKeyword_1_0() { return cPrintKeyword_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_1_0() { return cValueIDTerminalRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Output");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeFILEKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPathAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPathANYTHINGTerminalRuleCall_0_2_0 = (RuleCall)cPathAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeCONSOLEKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeCOUTKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		
		//Output:
		//	type="FILE" "(" path=ANYTHING ")"
		//	| type="CONSOLE"
		//	| type="COUT";
		@Override public ParserRule getRule() { return rule; }
		
		//type="FILE" "(" path=ANYTHING ")" | type="CONSOLE" | type="COUT"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type="FILE" "(" path=ANYTHING ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//type="FILE"
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//"FILE"
		public Keyword getTypeFILEKeyword_0_0_0() { return cTypeFILEKeyword_0_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//path=ANYTHING
		public Assignment getPathAssignment_0_2() { return cPathAssignment_0_2; }
		
		//ANYTHING
		public RuleCall getPathANYTHINGTerminalRuleCall_0_2_0() { return cPathANYTHINGTerminalRuleCall_0_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//type="CONSOLE"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"CONSOLE"
		public Keyword getTypeCONSOLEKeyword_1_0() { return cTypeCONSOLEKeyword_1_0; }
		
		//type="COUT"
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//"COUT"
		public Keyword getTypeCOUTKeyword_2_0() { return cTypeCOUTKeyword_2_0; }
	}
	public class FuzzySystemBuildingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.FuzzySystemBuilding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuzzySystemBuildingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAffectationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAffectationsAffectationParserRuleCall_2_0 = (RuleCall)cAffectationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuzzySystemBuilding:
		//	"FuzzySystemBuilding" "{" affectations+=Affectation* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"FuzzySystemBuilding" "{" affectations+=Affectation* "}"
		public Group getGroup() { return cGroup; }
		
		//"FuzzySystemBuilding"
		public Keyword getFuzzySystemBuildingKeyword_0() { return cFuzzySystemBuildingKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//affectations+=Affectation*
		public Assignment getAffectationsAssignment_2() { return cAffectationsAssignment_2; }
		
		//Affectation
		public RuleCall getAffectationsAffectationParserRuleCall_2_0() { return cAffectationsAffectationParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Affectation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cParamsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cParamsParamParserRuleCall_0_4_0 = (RuleCall)cParamsAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueANYTHINGTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		
		//Affectation:
		//	name=ID '=' value=ID '(' params+=Param* ')'
		//	| name=ID '=' value=ANYTHING
		//	| name=ID '=' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=ID '(' params+=Param* ')' | name=ID '=' value=ANYTHING | name=ID '=' exp=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID '=' value=ID '(' params+=Param* ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=ID
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_2_0() { return cValueIDTerminalRuleCall_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//params+=Param*
		public Assignment getParamsAssignment_0_4() { return cParamsAssignment_0_4; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_0_4_0() { return cParamsParamParserRuleCall_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//name=ID '=' value=ANYTHING
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=ANYTHING
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//ANYTHING
		public RuleCall getValueANYTHINGTerminalRuleCall_1_2_0() { return cValueANYTHINGTerminalRuleCall_1_2_0; }
		
		//name=ID '=' exp=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_2_0() { return cExpExpressionParserRuleCall_2_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameOPERATORTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpsExpressionParserRuleCall_0_2_0 = (RuleCall)cExpsAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cIsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Expression:
		//	name=OPERATOR "{" exps+=Expression* "}"
		//	| name=ID "is" value=Expression
		//	| name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=OPERATOR "{" exps+=Expression* "}" | name=ID "is" value=Expression | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=OPERATOR "{" exps+=Expression* "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//name=OPERATOR
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//OPERATOR
		public RuleCall getNameOPERATORTerminalRuleCall_0_0_0() { return cNameOPERATORTerminalRuleCall_0_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//exps+=Expression*
		public Assignment getExpsAssignment_0_2() { return cExpsAssignment_0_2; }
		
		//Expression
		public RuleCall getExpsExpressionParserRuleCall_0_2_0() { return cExpsExpressionParserRuleCall_0_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//name=ID "is" value=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//"is"
		public Keyword getIsKeyword_1_1() { return cIsKeyword_1_1; }
		
		//value=Expression
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_2_0() { return cValueExpressionParserRuleCall_1_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOPERATORTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetIDTerminalRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Binding:
		//	op=OPERATOR '=' target=ID ("(" params+=Param* ")")?;
		@Override public ParserRule getRule() { return rule; }
		
		//op=OPERATOR '=' target=ID ("(" params+=Param* ")")?
		public Group getGroup() { return cGroup; }
		
		//op=OPERATOR
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//OPERATOR
		public RuleCall getOpOPERATORTerminalRuleCall_0_0() { return cOpOPERATORTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//target=ID
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_2_0() { return cTargetIDTerminalRuleCall_2_0; }
		
		//("(" params+=Param* ")")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//params+=Param*
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_0() { return cParamsParamParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.Param");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueANYTHINGTerminalRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueANYTHINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Param:
		//	value=ANYTHING ","
		//	| value=ANYTHING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ANYTHING "," | value=ANYTHING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ANYTHING ","
		public Group getGroup_0() { return cGroup_0; }
		
		//value=ANYTHING
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//ANYTHING
		public RuleCall getValueANYTHINGTerminalRuleCall_0_0_0() { return cValueANYTHINGTerminalRuleCall_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//value=ANYTHING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ANYTHING
		public RuleCall getValueANYTHINGTerminalRuleCall_1_0() { return cValueANYTHINGTerminalRuleCall_1_0; }
	}
	public class TypeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.TypeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeNameIDTerminalRuleCall_3_0 = (RuleCall)cTypeNameAssignment_3.eContents().get(0);
		
		//TypeSet:
		//	"set" "Type" "to" typeName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"set" "Type" "to" typeName=ID
		public Group getGroup() { return cGroup; }
		
		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//"Type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//typeName=ID
		public Assignment getTypeNameAssignment_3() { return cTypeNameAssignment_3; }
		
		//ID
		public RuleCall getTypeNameIDTerminalRuleCall_3_0() { return cTypeNameIDTerminalRuleCall_3_0; }
	}
	public class FuzzyConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.FuzzyConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuzzyConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeSETAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSETTypeSetParserRuleCall_2_0 = (RuleCall)cTypeSETAssignment_2.eContents().get(0);
		private final Assignment cBindingsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBindingsListBindingParserRuleCall_3_0 = (RuleCall)cBindingsListAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FuzzyConfig:
		//	"FuzzyConfig" "{" typeSET=TypeSet BindingsList+=Binding* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"FuzzyConfig" "{" typeSET=TypeSet BindingsList+=Binding* "}"
		public Group getGroup() { return cGroup; }
		
		//"FuzzyConfig"
		public Keyword getFuzzyConfigKeyword_0() { return cFuzzyConfigKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//typeSET=TypeSet
		public Assignment getTypeSETAssignment_2() { return cTypeSETAssignment_2; }
		
		//TypeSet
		public RuleCall getTypeSETTypeSetParserRuleCall_2_0() { return cTypeSETTypeSetParserRuleCall_2_0; }
		
		//BindingsList+=Binding*
		public Assignment getBindingsListAssignment_3() { return cBindingsListAssignment_3; }
		
		//Binding
		public RuleCall getBindingsListBindingParserRuleCall_3_0() { return cBindingsListBindingParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final FuzzyModelElements pFuzzyModel;
	private final OutputsElements pOutputs;
	private final WriteElements pWrite;
	private final OutputElements pOutput;
	private final FuzzySystemBuildingElements pFuzzySystemBuilding;
	private final AffectationElements pAffectation;
	private final ExpressionElements pExpression;
	private final BindingElements pBinding;
	private final ParamElements pParam;
	private final TerminalRule tANYTHING;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tOPERATOR;
	private final TypeSetElements pTypeSet;
	private final FuzzyConfigElements pFuzzyConfig;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FuzzyLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFuzzyModel = new FuzzyModelElements();
		this.pOutputs = new OutputsElements();
		this.pWrite = new WriteElements();
		this.pOutput = new OutputElements();
		this.pFuzzySystemBuilding = new FuzzySystemBuildingElements();
		this.pAffectation = new AffectationElements();
		this.pExpression = new ExpressionElements();
		this.pBinding = new BindingElements();
		this.pParam = new ParamElements();
		this.tANYTHING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.ANYTHING");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.DOUBLE");
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.FuzzyLanguage.OPERATOR");
		this.pTypeSet = new TypeSetElements();
		this.pFuzzyConfig = new FuzzyConfigElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.FuzzyLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FuzzyModel:
	//	elements+=FuzzyConfig
	//	elements+=FuzzySystemBuilding
	//	elements+=Outputs*;
	public FuzzyModelElements getFuzzyModelAccess() {
		return pFuzzyModel;
	}
	
	public ParserRule getFuzzyModelRule() {
		return getFuzzyModelAccess().getRule();
	}
	
	//Outputs:
	//	"Output" "=" out=Output wr=Write;
	public OutputsElements getOutputsAccess() {
		return pOutputs;
	}
	
	public ParserRule getOutputsRule() {
		return getOutputsAccess().getRule();
	}
	
	//Write:
	//	"Write(" value=ID ")"
	//	| "Print(" value=ID ")";
	public WriteElements getWriteAccess() {
		return pWrite;
	}
	
	public ParserRule getWriteRule() {
		return getWriteAccess().getRule();
	}
	
	//Output:
	//	type="FILE" "(" path=ANYTHING ")"
	//	| type="CONSOLE"
	//	| type="COUT";
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//FuzzySystemBuilding:
	//	"FuzzySystemBuilding" "{" affectations+=Affectation* "}";
	public FuzzySystemBuildingElements getFuzzySystemBuildingAccess() {
		return pFuzzySystemBuilding;
	}
	
	public ParserRule getFuzzySystemBuildingRule() {
		return getFuzzySystemBuildingAccess().getRule();
	}
	
	//Affectation:
	//	name=ID '=' value=ID '(' params+=Param* ')'
	//	| name=ID '=' value=ANYTHING
	//	| name=ID '=' exp=Expression;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//Expression:
	//	name=OPERATOR "{" exps+=Expression* "}"
	//	| name=ID "is" value=Expression
	//	| name=ID;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Binding:
	//	op=OPERATOR '=' target=ID ("(" params+=Param* ")")?;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Param:
	//	value=ANYTHING ","
	//	| value=ANYTHING;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//terminal ANYTHING:
	//	INT | STRING | DOUBLE | "ASK_USER_FOR_VALUE" | "CONCAVE" | "CONVEXE" | "Up" | "Down";
	public TerminalRule getANYTHINGRule() {
		return tANYTHING;
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal OPERATOR:
	//	"AND"
	//	| "NOT"
	//	| "OR"
	//	| "DEFUZZ"
	//	| "THEN"
	//	| "AGG";
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	}
	
	//TypeSet:
	//	"set" "Type" "to" typeName=ID;
	public TypeSetElements getTypeSetAccess() {
		return pTypeSet;
	}
	
	public ParserRule getTypeSetRule() {
		return getTypeSetAccess().getRule();
	}
	
	//FuzzyConfig:
	//	"FuzzyConfig" "{" typeSET=TypeSet BindingsList+=Binding* "}";
	public FuzzyConfigElements getFuzzyConfigAccess() {
		return pFuzzyConfig;
	}
	
	public ParserRule getFuzzyConfigRule() {
		return getFuzzyConfigAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
