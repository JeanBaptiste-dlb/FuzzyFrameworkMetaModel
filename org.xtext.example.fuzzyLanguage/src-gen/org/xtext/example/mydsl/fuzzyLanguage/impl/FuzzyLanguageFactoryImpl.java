/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.fuzzyLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.fuzzyLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FuzzyLanguageFactoryImpl extends EFactoryImpl implements FuzzyLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FuzzyLanguageFactory init()
  {
    try
    {
      FuzzyLanguageFactory theFuzzyLanguageFactory = (FuzzyLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(FuzzyLanguagePackage.eNS_URI);
      if (theFuzzyLanguageFactory != null)
      {
        return theFuzzyLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FuzzyLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuzzyLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FuzzyLanguagePackage.FUZZY_MODEL: return createFuzzyModel();
      case FuzzyLanguagePackage.OUTPUTS: return createOutputs();
      case FuzzyLanguagePackage.WRITE: return createWrite();
      case FuzzyLanguagePackage.OUTPUT: return createOutput();
      case FuzzyLanguagePackage.FUZZY_SYSTEM_BUILDING: return createFuzzySystemBuilding();
      case FuzzyLanguagePackage.AFFECTATION: return createAffectation();
      case FuzzyLanguagePackage.EXPRESSION: return createExpression();
      case FuzzyLanguagePackage.BINDING: return createBinding();
      case FuzzyLanguagePackage.PARAM: return createParam();
      case FuzzyLanguagePackage.TYPE_SET: return createTypeSet();
      case FuzzyLanguagePackage.FUZZY_CONFIG: return createFuzzyConfig();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuzzyModel createFuzzyModel()
  {
    FuzzyModelImpl fuzzyModel = new FuzzyModelImpl();
    return fuzzyModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Outputs createOutputs()
  {
    OutputsImpl outputs = new OutputsImpl();
    return outputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Write createWrite()
  {
    WriteImpl write = new WriteImpl();
    return write;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuzzySystemBuilding createFuzzySystemBuilding()
  {
    FuzzySystemBuildingImpl fuzzySystemBuilding = new FuzzySystemBuildingImpl();
    return fuzzySystemBuilding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Affectation createAffectation()
  {
    AffectationImpl affectation = new AffectationImpl();
    return affectation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Param createParam()
  {
    ParamImpl param = new ParamImpl();
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeSet createTypeSet()
  {
    TypeSetImpl typeSet = new TypeSetImpl();
    return typeSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuzzyConfig createFuzzyConfig()
  {
    FuzzyConfigImpl fuzzyConfig = new FuzzyConfigImpl();
    return fuzzyConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuzzyLanguagePackage getFuzzyLanguagePackage()
  {
    return (FuzzyLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FuzzyLanguagePackage getPackage()
  {
    return FuzzyLanguagePackage.eINSTANCE;
  }

} //FuzzyLanguageFactoryImpl
