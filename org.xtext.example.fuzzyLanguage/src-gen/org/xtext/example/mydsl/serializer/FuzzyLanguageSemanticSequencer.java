/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.fuzzyLanguage.Affectation;
import org.xtext.example.mydsl.fuzzyLanguage.Binding;
import org.xtext.example.mydsl.fuzzyLanguage.Expression;
import org.xtext.example.mydsl.fuzzyLanguage.FuzzyConfig;
import org.xtext.example.mydsl.fuzzyLanguage.FuzzyLanguagePackage;
import org.xtext.example.mydsl.fuzzyLanguage.FuzzyModel;
import org.xtext.example.mydsl.fuzzyLanguage.FuzzySystemBuilding;
import org.xtext.example.mydsl.fuzzyLanguage.Output;
import org.xtext.example.mydsl.fuzzyLanguage.Outputs;
import org.xtext.example.mydsl.fuzzyLanguage.Param;
import org.xtext.example.mydsl.fuzzyLanguage.TypeSet;
import org.xtext.example.mydsl.fuzzyLanguage.Write;
import org.xtext.example.mydsl.services.FuzzyLanguageGrammarAccess;

@SuppressWarnings("all")
public class FuzzyLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FuzzyLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FuzzyLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FuzzyLanguagePackage.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case FuzzyLanguagePackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case FuzzyLanguagePackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case FuzzyLanguagePackage.FUZZY_CONFIG:
				sequence_FuzzyConfig(context, (FuzzyConfig) semanticObject); 
				return; 
			case FuzzyLanguagePackage.FUZZY_MODEL:
				sequence_FuzzyModel(context, (FuzzyModel) semanticObject); 
				return; 
			case FuzzyLanguagePackage.FUZZY_SYSTEM_BUILDING:
				sequence_FuzzySystemBuilding(context, (FuzzySystemBuilding) semanticObject); 
				return; 
			case FuzzyLanguagePackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case FuzzyLanguagePackage.OUTPUTS:
				sequence_Outputs(context, (Outputs) semanticObject); 
				return; 
			case FuzzyLanguagePackage.PARAM:
				sequence_Param(context, (Param) semanticObject); 
				return; 
			case FuzzyLanguagePackage.TYPE_SET:
				sequence_TypeSet(context, (TypeSet) semanticObject); 
				return; 
			case FuzzyLanguagePackage.WRITE:
				sequence_Write(context, (Write) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     ((name=ID value=ID params+=Param*) | (name=ID value=ANYTHING) | (name=ID exp=Expression))
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (op=OPERATOR target=ID params+=Param*)
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     ((name=OPERATOR exps+=Expression*) | (name=ID value=Expression) | name=ID)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FuzzyConfig returns FuzzyConfig
	 *
	 * Constraint:
	 *     (typeSET=TypeSet BindingsList+=Binding*)
	 */
	protected void sequence_FuzzyConfig(ISerializationContext context, FuzzyConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FuzzyModel returns FuzzyModel
	 *
	 * Constraint:
	 *     (elements+=FuzzyConfig elements+=FuzzySystemBuilding elements+=Outputs*)
	 */
	protected void sequence_FuzzyModel(ISerializationContext context, FuzzyModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FuzzySystemBuilding returns FuzzySystemBuilding
	 *
	 * Constraint:
	 *     affectations+=Affectation+
	 */
	protected void sequence_FuzzySystemBuilding(ISerializationContext context, FuzzySystemBuilding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     ((type='FILE' path=ANYTHING) | type='CONSOLE' | type='COUT')
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Outputs returns Outputs
	 *
	 * Constraint:
	 *     (out=Output wr=Write)
	 */
	protected void sequence_Outputs(ISerializationContext context, Outputs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FuzzyLanguagePackage.Literals.OUTPUTS__OUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FuzzyLanguagePackage.Literals.OUTPUTS__OUT));
			if (transientValues.isValueTransient(semanticObject, FuzzyLanguagePackage.Literals.OUTPUTS__WR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FuzzyLanguagePackage.Literals.OUTPUTS__WR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutputsAccess().getOutOutputParserRuleCall_2_0(), semanticObject.getOut());
		feeder.accept(grammarAccess.getOutputsAccess().getWrWriteParserRuleCall_3_0(), semanticObject.getWr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Param returns Param
	 *
	 * Constraint:
	 *     (value=ANYTHING | value=ANYTHING)
	 */
	protected void sequence_Param(ISerializationContext context, Param semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSet returns TypeSet
	 *
	 * Constraint:
	 *     typeName=ID
	 */
	protected void sequence_TypeSet(ISerializationContext context, TypeSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FuzzyLanguagePackage.Literals.TYPE_SET__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FuzzyLanguagePackage.Literals.TYPE_SET__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeSetAccess().getTypeNameIDTerminalRuleCall_3_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Write returns Write
	 *
	 * Constraint:
	 *     (value=ID | value=ID)
	 */
	protected void sequence_Write(ISerializationContext context, Write semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
