/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.fuzzyLanguage.Affectation;
import org.xtext.example.mydsl.fuzzyLanguage.Binding;
import org.xtext.example.mydsl.fuzzyLanguage.Expression;
import org.xtext.example.mydsl.fuzzyLanguage.FuzzyConfig;
import org.xtext.example.mydsl.fuzzyLanguage.FuzzyModel;
import org.xtext.example.mydsl.fuzzyLanguage.Outputs;
import org.xtext.example.mydsl.fuzzyLanguage.Param;
import org.xtext.example.mydsl.fuzzyLanguage.TypeSet;
import org.xtext.example.mydsl.fuzzyLanguage.impl.BindingImpl;
import org.xtext.example.mydsl.fuzzyLanguage.impl.FuzzyConfigImpl;
import org.xtext.example.mydsl.fuzzyLanguage.impl.FuzzyModelImpl;
import org.xtext.example.mydsl.fuzzyLanguage.impl.FuzzySystemBuildingImpl;
import org.xtext.example.mydsl.fuzzyLanguage.impl.OutputsImpl;
import org.xtext.example.mydsl.fuzzyLanguage.impl.TypeSetImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FuzzyLanguageGenerator extends AbstractGenerator {
  private ArrayList<String> ids = new ArrayList<String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile(
      "FuzzyMain.cpp", this.compile(resource));
  }
  
  private String Type = "";
  
  public CharSequence compile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.append("#include <fstream>");
    _builder.newLine();
    _builder.append("#include \"ExpressionFactory.h\"");
    _builder.newLine();
    _builder.append("#include \"CogDefuzz.h\"");
    _builder.newLine();
    _builder.append("#include \"FuzzyFactory.h\"");
    _builder.newLine();
    _builder.append("#include \"IsRamp.h\"");
    _builder.newLine();
    _builder.append("#include \"IsGaussian.h\"");
    _builder.newLine();
    _builder.append("#include \"IsTrapeze.h\"");
    _builder.newLine();
    _builder.append("#include \"IsTriangle.h\"");
    _builder.newLine();
    _builder.append("#include \"AndMin.h\"");
    _builder.newLine();
    _builder.append("#include \"OrPlus.h\"");
    _builder.newLine();
    _builder.append("#include \"OrMax.h\"");
    _builder.newLine();
    _builder.append("#include \"ThenMin.h\"");
    _builder.newLine();
    _builder.append("#include \"AggPlus.h\"");
    _builder.newLine();
    _builder.append("#include \"NotMinus1.h\"");
    _builder.newLine();
    _builder.append("#include \"AggMax.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("using namespace Core;");
    _builder.newLine();
    _builder.append("using namespace Fuzzy;");
    _builder.newLine();
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int main(){");
    _builder.newLine();
    _builder.append("\t");
    {
      EList<EObject> _contents = resource.getContents();
      for(final EObject obj : _contents) {
        CharSequence _compile = this.compile(obj);
        _builder.append(_compile, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EObject obj) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (obj instanceof TypeSet) {
      _matched=true;
      _switchResult = this.compile(((TypeSetImpl) obj));
    }
    if (!_matched) {
      if (obj instanceof Binding) {
        _matched=true;
        _switchResult = this.compile(((BindingImpl) obj));
      }
    }
    if (!_matched) {
      if (obj instanceof FuzzyConfig) {
        _matched=true;
        _switchResult = this.compile(((FuzzyConfigImpl) obj));
      }
    }
    if (!_matched) {
      if (obj instanceof FuzzySystemBuildingImpl) {
        _matched=true;
        _switchResult = this.compile(((FuzzySystemBuildingImpl) obj));
      }
    }
    if (!_matched) {
      if (obj instanceof FuzzyModel) {
        _matched=true;
        _switchResult = this.compile(((FuzzyModelImpl) obj));
      }
    }
    if (!_matched) {
      if (obj instanceof Outputs) {
        _matched=true;
        _switchResult = this.compile(((OutputsImpl) obj));
      }
    }
    return _switchResult;
  }
  
  public CharSequence compile(final OutputsImpl out) {
    CharSequence _xifexpression = null;
    String _path = out.getOut().getPath();
    boolean _tripleEquals = (_path == null);
    if (_tripleEquals) {
      CharSequence _xifexpression_1 = null;
      boolean _contains = this.ids.contains(out.getWr().getValue());
      if (_contains) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("cout << \"");
        String _value = out.getWr().getValue();
        _builder.append(_value);
        _builder.append(" ->\" << ");
        String _value_1 = out.getWr().getValue();
        _builder.append(_value_1);
        _builder.append("->evaluate()<< endl;");
        _xifexpression_1 = _builder;
      } else {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("cout << \"");
        String _value_2 = out.getWr().getValue();
        _builder_1.append(_value_2);
        _builder_1.append(" ->\"<<&");
        String _value_3 = out.getWr().getValue();
        _builder_1.append(_value_3);
        _builder_1.append("->evaluate()<< endl;");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    } else {
      CharSequence _xifexpression_2 = null;
      boolean _contains_1 = this.ids.contains(out.getWr().getValue());
      if (_contains_1) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("ofstream file (");
        String _path_1 = out.getOut().getPath();
        _builder_2.append(_path_1);
        _builder_2.append(");");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("file<<\"");
        String _value_4 = out.getWr().getValue();
        _builder_2.append(_value_4);
        _builder_2.append(" ->\"<<");
        String _value_5 = out.getWr().getValue();
        _builder_2.append(_value_5);
        _builder_2.append("->evaluate();");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("file.close();");
        _builder_2.newLine();
        _xifexpression_2 = _builder_2;
      } else {
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append("ofstream file (");
        String _path_2 = out.getOut().getPath();
        _builder_3.append(_path_2);
        _builder_3.append(");");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("file<<\"");
        String _value_6 = out.getWr().getValue();
        _builder_3.append(_value_6);
        _builder_3.append(" ->\"<<");
        String _value_7 = out.getWr().getValue();
        _builder_3.append(_value_7);
        _builder_3.append("->evaluate();");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("file.close();");
        _builder_3.newLine();
        _xifexpression_2 = _builder_3;
      }
      _xifexpression = _xifexpression_2;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final FuzzyModel fm) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EObject> _eContents = fm.eContents();
      for(final EObject element : _eContents) {
        CharSequence _compile = this.compile(element);
        _builder.append(_compile);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final FuzzyConfigImpl impl) {
    CharSequence _xblockexpression = null;
    {
      EList<EObject> contents = impl.eContents();
      StringConcatenation _builder = new StringConcatenation();
      {
        for(final EObject obj : contents) {
          CharSequence _compile = this.compile(obj);
          _builder.append(_compile);
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("SugenoDefuzz<float> opSugenoDefuzz;\t");
      _builder.newLine();
      _builder.append("FuzzyFactory<");
      _builder.append(this.Type);
      _builder.append("> f((And<");
      _builder.append(this.Type);
      _builder.append(">*) &opAnd, (Or<");
      _builder.append(this.Type);
      _builder.append(">*)&opOr, (Then<");
      _builder.append(this.Type);
      _builder.append(">*)&opThen, (Agg<");
      _builder.append(this.Type);
      _builder.append(">*)&opAgg, &opDefuzz, (Not<");
      _builder.append(this.Type);
      _builder.append(">*)&opNot, &opSugenoDefuzz );");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compile(final TypeSetImpl impl) {
    CharSequence _xblockexpression = null;
    {
      this.Type = impl.getTypeName();
      StringConcatenation _builder = new StringConcatenation();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compile(final FuzzySystemBuildingImpl fsb) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Affectation> _affectations = fsb.getAffectations();
      for(final Affectation affectation : _affectations) {
        CharSequence _compile = this.compile(((Affectation) affectation));
        _builder.append(_compile);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Affectation af) {
    CharSequence _xblockexpression = null;
    {
      Expression _exp = af.getExp();
      boolean _tripleNotEquals = (_exp != null);
      if (_tripleNotEquals) {
        this.ids.add(af.getName());
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("Expression<");
        _builder.append(this.Type);
        _builder.append(">* ");
        String _name = af.getName();
        _builder.append(_name);
        _builder.append(" = ");
        CharSequence _compile = this.compile(af.getExp());
        _builder.append(_compile);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        return _builder;
      }
      CharSequence _xifexpression = null;
      if (((af.getParams().size() == 0) && (!Objects.equal(af.getValue(), "ASK_USER_FOR_VALUE")))) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("ValueModel<");
        _builder_1.append(this.Type);
        _builder_1.append("> ");
        String _name_1 = af.getName();
        _builder_1.append(_name_1);
        _builder_1.append("(");
        String _value = af.getValue();
        _builder_1.append(_value);
        _builder_1.append(");");
        return _builder_1;
      } else {
        CharSequence _switchResult = null;
        String _value_1 = af.getValue();
        if (_value_1 != null) {
          switch (_value_1) {
            case "Gaussian":
              StringConcatenation _builder_2 = new StringConcatenation();
              _builder_2.append("IsGaussian<");
              _builder_2.append(this.Type);
              _builder_2.append("> ");
              String _string = af.getName().toString();
              _builder_2.append(_string);
              _builder_2.append("(");
              String _value_2 = af.getParams().get(0).getValue();
              _builder_2.append(_value_2);
              _builder_2.append(",");
              String _value_3 = af.getParams().get(1).getValue();
              _builder_2.append(_value_3);
              _builder_2.append(");");
              _builder_2.newLineIfNotEmpty();
              return _builder_2;
            case "Trapeze":
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("IsTrapeze<");
              _builder_3.append(this.Type);
              _builder_3.append("> ");
              String _string_1 = af.getName().toString();
              _builder_3.append(_string_1);
              _builder_3.append("(");
              String _value_4 = af.getParams().get(0).getValue();
              _builder_3.append(_value_4);
              _builder_3.append(", ");
              String _value_5 = af.getParams().get(1).getValue();
              _builder_3.append(_value_5);
              _builder_3.append(", ");
              String _value_6 = af.getParams().get(2).getValue();
              _builder_3.append(_value_6);
              _builder_3.append(", ");
              String _value_7 = af.getParams().get(3).getValue();
              _builder_3.append(_value_7);
              _builder_3.append(", concavite::");
              String _value_8 = af.getParams().get(4).getValue();
              _builder_3.append(_value_8);
              _builder_3.append(");");
              _builder_3.newLineIfNotEmpty();
              return _builder_3;
            case "Triangle":
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("IsTriangle<");
              _builder_4.append(this.Type);
              _builder_4.append("> ");
              String _string_2 = af.getName().toString();
              _builder_4.append(_string_2);
              _builder_4.append("(");
              String _value_9 = af.getParams().get(0).getValue();
              _builder_4.append(_value_9);
              _builder_4.append(", ");
              String _value_10 = af.getParams().get(1).getValue();
              _builder_4.append(_value_10);
              _builder_4.append(", ");
              String _value_11 = af.getParams().get(2).getValue();
              _builder_4.append(_value_11);
              _builder_4.append(");");
              _builder_4.newLineIfNotEmpty();
              return _builder_4;
            case "Ramp":
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("IsRamp<");
              _builder_5.append(this.Type);
              _builder_5.append("> ");
              String _name_2 = af.getName();
              _builder_5.append(_name_2);
              _builder_5.append("(");
              String _value_12 = af.getParams().get(0).getValue();
              _builder_5.append(_value_12);
              _builder_5.append(", ");
              String _value_13 = af.getParams().get(1).getValue();
              _builder_5.append(_value_13);
              _builder_5.append(", IsRamp<");
              _builder_5.append(this.Type);
              _builder_5.append(">::dir::");
              String _value_14 = af.getParams().get(2).getValue();
              _builder_5.append(_value_14);
              _builder_5.append(");");
              _builder_5.newLineIfNotEmpty();
              return _builder_5;
            case "ASK_USER_FOR_VALUE":
              StringConcatenation _builder_6 = new StringConcatenation();
              _builder_6.append(this.Type);
              _builder_6.append(" value;");
              _builder_6.newLineIfNotEmpty();
              _builder_6.append("cout << \"");
              String _name_3 = af.getName();
              _builder_6.append(_name_3);
              _builder_6.append(" : \";");
              _builder_6.newLineIfNotEmpty();
              _builder_6.append("cin >> value;");
              _builder_6.newLine();
              _builder_6.append("ValueModel<");
              _builder_6.append(this.Type);
              _builder_6.append("> ");
              String _name_4 = af.getName();
              _builder_6.append(_name_4);
              _builder_6.append("(value);");
              _builder_6.newLineIfNotEmpty();
              _builder_6.newLine();
              _switchResult = _builder_6;
              break;
          }
        }
        _xifexpression = _switchResult;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public CharSequence compile(final Expression exp) {
    CharSequence _xifexpression = null;
    Expression _value = exp.getValue();
    boolean _tripleNotEquals = (_value != null);
    if (_tripleNotEquals) {
      CharSequence _xifexpression_1 = null;
      boolean _contains = this.ids.contains(exp.getName());
      if (_contains) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("f.newIs(");
        CharSequence _compile = this.compile(exp.getValue());
        _builder.append(_compile);
        _builder.append(", ");
        String _name = exp.getName();
        _builder.append(_name);
        _builder.append(" )");
        _xifexpression_1 = _builder;
      } else {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("f.newIs(");
        CharSequence _compile_1 = this.compile(exp.getValue());
        _builder_1.append(_compile_1);
        _builder_1.append(", &");
        String _name_1 = exp.getName();
        _builder_1.append(_name_1);
        _builder_1.append(" )");
        _xifexpression_1 = _builder_1;
      }
      _xifexpression = _xifexpression_1;
    } else {
      CharSequence _xifexpression_2 = null;
      int _size = exp.getExps().size();
      boolean _equals = (_size == 0);
      if (_equals) {
        CharSequence _xifexpression_3 = null;
        boolean _contains_1 = this.ids.contains(exp.getName());
        if (_contains_1) {
          StringConcatenation _builder_2 = new StringConcatenation();
          String _name_2 = exp.getName();
          _builder_2.append(_name_2);
          _xifexpression_3 = _builder_2;
        } else {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("&");
          String _name_3 = exp.getName();
          _builder_3.append(_name_3);
          _xifexpression_3 = _builder_3;
        }
        _xifexpression_2 = _xifexpression_3;
      } else {
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("f.new");
        String _firstUpper = StringExtensions.toFirstUpper(exp.getName().toLowerCase());
        _builder_4.append(_firstUpper);
        _builder_4.append("(");
        {
          EList<Expression> _exps = exp.getExps();
          for(final Expression ex : _exps) {
            {
              Expression _last = IterableExtensions.<Expression>last(exp.getExps());
              boolean _equals_1 = Objects.equal(ex, _last);
              if (_equals_1) {
                CharSequence _compile_2 = this.compile(ex);
                _builder_4.append(_compile_2);
              } else {
                CharSequence _compile_3 = this.compile(ex);
                _builder_4.append(_compile_3);
                _builder_4.append(",");
              }
            }
          }
        }
        _builder_4.append(")");
        _xifexpression_2 = _builder_4;
      }
      _xifexpression = _xifexpression_2;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final BindingImpl impl) {
    CharSequence _xblockexpression = null;
    {
      String op = "";
      String _op = impl.getOp();
      if (_op != null) {
        switch (_op) {
          case "NOT":
            op = "opNot";
            break;
          case "AND":
            op = "opAnd";
            break;
          case "OR":
            op = "opOr";
            break;
          case "DEFUZZ":
            op = "opDefuzz";
            break;
          case "THEN":
            op = "opThen";
            break;
          case "AGG":
            op = "opAgg";
            break;
        }
      }
      CharSequence _xifexpression = null;
      int _size = impl.getParams().size();
      boolean _equals = (_size == 0);
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        String _target = impl.getTarget();
        _builder.append(_target);
        _builder.append("<");
        _builder.append(this.Type);
        _builder.append("> ");
        _builder.append(op);
        _builder.append(";");
        _xifexpression = _builder;
      } else {
        StringConcatenation _builder_1 = new StringConcatenation();
        String _target_1 = impl.getTarget();
        _builder_1.append(_target_1);
        _builder_1.append("<");
        _builder_1.append(this.Type);
        _builder_1.append("> ");
        _builder_1.append(op);
        _builder_1.append(" (");
        {
          EList<Param> _params = impl.getParams();
          for(final Param p : _params) {
            {
              Param _last = IterableExtensions.<Param>last(impl.getParams());
              boolean _equals_1 = Objects.equal(p, _last);
              if (_equals_1) {
                String _value = p.getValue();
                _builder_1.append(_value);
              } else {
                String _value_1 = p.getValue();
                _builder_1.append(_value_1);
                _builder_1.append(",");
              }
            }
          }
        }
        _builder_1.append(");");
        _xifexpression = _builder_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public CharSequence compile(final EList<BindingImpl> bindings) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    {
      for(final Binding binding : bindings) {
        CharSequence _compile = this.compile(binding);
        _builder.append(_compile);
      }
    }
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
